interface PeriodsList {

  "internal id used for indexation, singleton"
  id: ID!

  "related release periods"
  periods: [ReleasePeriod!]! @derivedFrom(field: "list")

  "amount of grt in this list"
  amount: BigInt!

  "a list of periods composed keys: ${period.id}@${period.releaseStartDate}"
  keys: [String!]!

}

type PendingPeriods implements PeriodsList @entity {

  "internal id used for indexation, singleton"
  id: ID!

  "related release periods"
  periods: [ReleasePeriod!]! @derivedFrom(field: "list")

  "amount of grt pending to release"
  amount: BigInt!

  "a list of periods composed keys: ${period.id}@${period.releaseDate}"
  keys: [String!]!

  "next date to initiate a release"
  nextDateToProcess: BigInt!

  "next period to process"
  nextPeriodToProcess: String!

}

type ProcessedPeriods implements PeriodsList @entity {

  "internal id used for indexation, singleton"
  id: ID!

  "related release periods"
  periods: [ReleasePeriod!]! @derivedFrom(field: "list")

  "amount of grt already released"
  amount: BigInt! 

  "a list of periods composed keys: ${period.id}@${period.releaseDate}"
  keys: [String!]!

}

type ReleasePeriod @entity {

  "Auxiliary entity to represent amounts that will be released once releaseDate reached"
  id: ID!

  "This period contract"
  contract: LockWalletContract!

  "date when the period will be released"
  releaseDate: BigInt!

  "amount that will be released once release Date was reach"
  amount: BigInt!

  "Indicates if period was released or not"
  processed: Boolean!

  "A list to group release periods in pending or processed"
  list: PeriodsList!

  "period composed key: ${period.id}@${period.releaseDate}"
  key: String!

}

enum LockWalletTypes {
  FACTORY
  CUSTOM
  EXCHANGE
  GENESIS
}

type LockWalletContract @entity {

  "Entity created for debugging to know the params to call function to create periods"
  id: ID!

  "contract's EVM address"
  address: Bytes

  "related release period entity"
  periods: [ReleasePeriod!] @derivedFrom(field: "contract")

  "Periods to be created"
  periodsAmount: BigInt

  "managedAmount div periodsAmount"
  amountPerPeriod: BigInt

  "Periods already released"
  passedPeriods: BigInt

  "start time for releasing"
  startTime: BigInt

  "end Time for releasing"
  endTime: BigInt

  "total amount managed by it's contract"
  managedAmount: BigInt
 
  "grt amount to be released by this contract"
  pendingAmount: BigInt

  "grt amount to be released by this contract calculated as the contract does: managedAmount - availableAmount "
  totalLocked: BigInt

  "already released grt amount managed by this contract"
  releasedAmount: BigInt

  "Released amount calculated as the contract does: periodAmount * passedPeriods "
  availableAmount: BigInt

  type: LockWalletTypes

}


type Grt @entity {
  "Singleton entity where ID is set to 1"
  id: ID!

  "Graph token total existing tokens == Minted - Burned"
  totalSupply: BigInt!

  "Graph Token minted amount"
  minted: BigInt!

  "Graph Token burnt amount"
  burned: BigInt!

  "GRT Liquid Supply: All of the non locked tokens" 
  liquidSupply: BigInt!

  "GRT circulating Supply: All of non-genesis locked tokens" 
  circulatingSupply: BigInt!

  "Sum of all currently released Tokens"
  totalAvailableAmount: BigInt

  "Sum of all currently locked tokens"
  totalLockedAmount: BigInt

  "List of release periods"
  periodsToProcess: PendingPeriods!

  "Periods already released"
  periodsProcessed: ProcessedPeriods!
}